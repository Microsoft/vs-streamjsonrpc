StreamJsonRpc.IJsonRpcAsyncMessageFormatter
StreamJsonRpc.IJsonRpcAsyncMessageFormatter.DeserializeAsync(System.IO.Pipelines.PipeReader reader, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<StreamJsonRpc.Protocol.JsonRpcMessage>
StreamJsonRpc.IJsonRpcAsyncMessageTextFormatter
StreamJsonRpc.IJsonRpcAsyncMessageTextFormatter.DeserializeAsync(System.IO.Pipelines.PipeReader reader, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<StreamJsonRpc.Protocol.JsonRpcMessage>
StreamJsonRpc.IJsonRpcClientProxy
StreamJsonRpc.IJsonRpcClientProxy.JsonRpc.get -> StreamJsonRpc.JsonRpc
StreamJsonRpc.IJsonRpcInstanceContainer
StreamJsonRpc.IJsonRpcInstanceContainer.Rpc.set -> void
StreamJsonRpc.JsonMessageFormatter.DeserializeAsync(System.IO.Pipelines.PipeReader reader, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<StreamJsonRpc.Protocol.JsonRpcMessage>
StreamJsonRpc.JsonMessageFormatter.DeserializeAsync(System.IO.Pipelines.PipeReader reader, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<StreamJsonRpc.Protocol.JsonRpcMessage>
StreamJsonRpc.JsonMessageFormatter.Rpc.set -> void
StreamJsonRpc.JsonRpc.TraceEvents.ProgressNotificationError = 16 -> StreamJsonRpc.JsonRpc.TraceEvents
StreamJsonRpc.Reflection.MessageFormatterProgressTracker
StreamJsonRpc.Reflection.MessageFormatterProgressTracker.AddProgressObjectToMap(object value) -> long
StreamJsonRpc.Reflection.MessageFormatterProgressTracker.JsonProgress<T>
StreamJsonRpc.Reflection.MessageFormatterProgressTracker.JsonProgress<T>.JsonProgress(StreamJsonRpc.JsonRpc rpc, Newtonsoft.Json.Linq.JToken token) -> void
StreamJsonRpc.Reflection.MessageFormatterProgressTracker.JsonProgress<T>.JsonProgress(StreamJsonRpc.JsonRpc rpc, long? token) -> void
StreamJsonRpc.Reflection.MessageFormatterProgressTracker.JsonProgress<T>.Report(T value) -> void
StreamJsonRpc.Reflection.MessageFormatterProgressTracker.MessageFormatterProgressTracker() -> void
StreamJsonRpc.Reflection.MessageFormatterProgressTracker.ProgressParamInformation
StreamJsonRpc.Reflection.MessageFormatterProgressTracker.ProgressParamInformation.ProgressObject.get -> object
StreamJsonRpc.Reflection.MessageFormatterProgressTracker.ProgressParamInformation.ProgressParamInformation(object progressObject) -> void
StreamJsonRpc.Reflection.MessageFormatterProgressTracker.ProgressParamInformation.ReportMethod.get -> System.Reflection.MethodInfo
StreamJsonRpc.Reflection.MessageFormatterProgressTracker.ProgressParamInformation.ValueType.get -> System.Type
readonly StreamJsonRpc.Reflection.MessageFormatterProgressTracker.ProgressMap -> System.Collections.Generic.Dictionary<long, StreamJsonRpc.Reflection.MessageFormatterProgressTracker.ProgressParamInformation>
static StreamJsonRpc.JsonRpc.Attach<T>(StreamJsonRpc.IJsonRpcMessageHandler handler) -> T
static StreamJsonRpc.JsonRpc.Attach<T>(StreamJsonRpc.IJsonRpcMessageHandler handler, StreamJsonRpc.JsonRpcProxyOptions options) -> T
static StreamJsonRpc.Reflection.MessageFormatterProgressTracker.FindIProgressOfT(System.Type objectType) -> System.Type