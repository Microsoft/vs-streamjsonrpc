trigger:
  branches:
    include: ["master", "v1.4", "v1.5", "dev/andarno/hosted"]
  paths:
    exclude: ["doc", "*.md", ".appveyor.yml", ".travis.yml"]

variables:
  TreatWarningsAsErrors: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  BuildConfiguration: Release
  BuildPlatform: Any CPU

resources:
  containers:
  - container: linux
    image: andrewarnott.azurecr.io/linux-buildagent
    endpoint: andrewarnott ACR

jobs:
- job: Windows
  pool: Hosted VS2017
  steps:
  - task: PowerShell@2
    displayName: Set VSTS variables
    inputs:
      targetType: inline
      script: |
        if ($env:SignType -eq 'Real') {
          $feedGuid = '09d8d03c-1ac8-456e-9274-4d2364527d99'
        } else {
          $feedGuid = 'da484c78-f942-44ef-b197-99e2a1bef53c'
        }

        Write-Host "##vso[task.setvariable variable=feedGuid]$feedGuid"

        if ($env:ComputerName.StartsWith('factoryvm', [StringComparison]::OrdinalIgnoreCase)) {
          Write-Host "Running on hosted queue"
          Write-Host "##vso[task.setvariable variable=Hosted]true"
        }

  - ${{ if eq('false', 'true') }}:
    - template: .azure-pipeline.microbuild.before.yml

  - template: build.yml
    parameters:
      build: all

  - task: DotNetCoreCLI@2
    displayName: Pack
    inputs:
      command: pack
      projects: src/**/*.sln
      nobuild: true

  - task: VSTest@2
    displayName: Run tests on .NET Framework (with code coverage)
    inputs:
      testFiltercriteria: TestCategory!=FailsInCloudTest
      searchFolder: $(System.DefaultWorkingDirectory)\bin
      testAssemblyVer2: |
        **\*tests*.dll
      platform: $(BuildPlatform)
      configuration: $(BuildConfiguration)
      codeCoverageEnabled: true
    condition: and(succeeded(), ne(variables['SignType'], 'real'))

  - ${{ if eq('false', 'true') }}:
    - template: .azure-pipeline.microbuild.after.yml

  - task: CopyFiles@1
    inputs:
      Contents: |
        bin/**/$(BuildConfiguration)/**/StreamJsonRpc.*.nupkg
      TargetFolder: $(Build.ArtifactStagingDirectory)/deployables
      flattenFolders: true
    displayName: Collecting deployables
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)/deployables
      ArtifactName: deployables
      ArtifactType: Container
    displayName: Publish deployables artifacts
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- job: LinuxContainer
  pool:
    vmImage: Ubuntu 16.04
  container: linux
  variables:
    targetfx: netcoreapp1.0
    runtime: 1.0.11
  steps:
  - script: |
      dotnet build src/StreamJsonRpc.Tests/StreamJsonRpc.Tests.csproj -v n -f $(targetfx) /bl:"$(Build.ArtifactStagingDirectory)/build_logs/$(targetfx).binlog" -c $(BuildConfiguration) -p:GitLinkEnabled=false
      DOTNET_ROLL_FORWARD_ON_NO_CANDIDATE_FX=0 RuntimeFrameworkVersion=$(runtime) dotnet test --no-build src/StreamJsonRpc.Tests/StreamJsonRpc.Tests.csproj -v n --filter "TestCategory!=FailsInCloudTest" -f $(targetfx) -c $(BuildConfiguration)

- job: LinuxMatrix
  pool:
    vmImage: Ubuntu 16.04
  strategy:
    matrix:
      netcoreapp1_0:
        runtime: 1.0.11
        targetfx: netcoreapp1.0
      netcoreapp1_1:
        runtime: 1.1.8
  steps:
  - script: |
      wget https://dot.net/v1/dotnet-install.sh -O /tmp/dotnet-install.sh
      chmod +x /tmp/dotnet-install.sh
      . /tmp/dotnet-install.sh -v $(runtime) --runtime dotnet
      . /tmp/dotnet-install.sh -v 2.1.300
      dotnet --info
      dotnet build src/StreamJsonRpc.Tests/StreamJsonRpc.Tests.csproj -v n -f $(targetfx) /bl:"$(Build.ArtifactStagingDirectory)/build_logs/$(targetfx).binlog"
      DOTNET_ROLL_FORWARD_ON_NO_CANDIDATE_FX=0 RuntimeFrameworkVersion=$(runtime) dotnet test --no-build src/StreamJsonRpc.Tests/StreamJsonRpc.Tests.csproj -v n --filter "TestCategory!=FailsInCloudTest" -f $(targetfx)
    displayName: Installing .NET Core SDK and runtimes and building and running tests
#  - task: DotNetCoreCLI@2
#    displayName: Build tests for $(targetfx)
#    inputs:
#      command: build
#      projects: src/**/*.Tests.csproj
#      arguments: -v n -f $(targetfx) /bl:"$(Build.ArtifactStagingDirectory)/build_logs/$(targetfx).binlog"
#  - task: DotNetCoreCLI@2
#    displayName: Run tests on $(targetfx)
#    inputs:
#      command: test
#      projects: src/**/*.Tests.csproj
#      nobuild: true
#      arguments:  -v n --filter "TestCategory!=FailsInCloudTest" -f $(targetfx)
#    env:
#      DOTNET_ROLL_FORWARD_ON_NO_CANDIDATE_FX: 0
#      RuntimeFrameworkVersion: $(runtime)

- job: Linux
  pool:
    vmImage: Ubuntu 16.04
  variables:
    GitLinkEnabled: false
  steps:
  - task: DotNetCoreInstaller@0
    displayName: Install .NET Core runtime 1.0.11
    inputs:
      packageType: runtime
      version: 1.0.11
  - task: DotNetCoreInstaller@0
    displayName: Install .NET Core runtime 1.1.8
    inputs:
      packageType: runtime
      version: 1.1.8
  - task: DotNetCoreInstaller@0
    displayName: Install .NET Core runtime 2.0.7
    inputs:
      packageType: runtime
      version: 2.0.7
  - task: DotNetCoreInstaller@0
    displayName: Install .NET Core runtime 2.0.0
    inputs:
      packageType: runtime
      version: 2.0.0
  - task: DotNetCoreInstaller@0
    displayName: Install .NET Core SDK 2.1.300
    inputs:
      packageType: sdk
      version: 2.1.300
  - template: build.yml

- job: macOS
  pool:
    vmImage: macOS 10.13
  variables:
    GitLinkEnabled: false
  steps:
  - template: build.yml
