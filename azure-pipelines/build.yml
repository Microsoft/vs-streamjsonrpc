steps:
- script: dotnet --info
  displayName: Show dotnet SDK info

- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    verbosityRestore: normal # detailed, normal, minimal
    projects: src/**/*.sln
    feedsToUse: config
    nugetConfigPath: src/nuget.config

# Only Windows can build every target framework
- ${{ if eq(parameters.build, 'all') }}:
  # Use VSBuild on Windows so GitLink will work (it fails on dotnet build)
  - task: VSBuild@1
    inputs:
      vsVersion: 15.0
      msbuildArgs: /t:build /m /v:m /bl:"$(Build.ArtifactStagingDirectory)/build_logs/msbuild.binlog"
      platform: $(BuildPlatform)
      configuration: $(BuildConfiguration)
    displayName: Build Visual Studio solution

  - task: DotNetCoreCLI@2
    displayName: Run tests
    inputs:
      command: test
      projects: src/**/*.Tests.csproj
      arguments: --configuration $(BuildConfiguration) --no-build --filter "TestCategory!=FailsInCloudTest" -v n
    condition: and(succeeded(), ne(variables['SignType'], 'real'))

- ${{ if ne(parameters.build, 'all') }}:
  - task: DotNetCoreCLI@2
    displayName: Build and run tests on .NET Core 1.0
    inputs:
      command: test
      projects: src/**/*.Tests.csproj
      arguments: --configuration $(BuildConfiguration) --filter "TestCategory!=FailsInCloudTest" -v n -f netcoreapp1.0 /bl:"$(Build.ArtifactStagingDirectory)/build_logs/netcoreapp1.0.binlog"
    condition: and(succeeded(), ne(variables['SignType'], 'real'))
  - task: DotNetCoreCLI@2
    displayName: Build and run tests on .NET Core 2.0
    inputs:
      command: test
      projects: src/**/*.Tests.csproj
      arguments: --configuration $(BuildConfiguration) --filter "TestCategory!=FailsInCloudTest" -v n -f netcoreapp2.0 /bl:"$(Build.ArtifactStagingDirectory)/build_logs/netcoreapp2.0.binlog"
    condition: and(succeeded(), ne(variables['SignType'], 'real'))
  - task: DotNetCoreCLI@2
    displayName: Build and run tests on .NET Core 2.1
    inputs:
      command: test
      projects: src/**/*.Tests.csproj
      arguments: --configuration $(BuildConfiguration) --filter "TestCategory!=FailsInCloudTest" -v n -f netcoreapp2.1 /bl:"$(Build.ArtifactStagingDirectory)/build_logs/netcoreapp2.1.binlog"
    condition: and(succeeded(), ne(variables['SignType'], 'real'))

- task: CopyFiles@1
  inputs:
    Contents: |
      obj/**/project.assets.json
    TargetFolder: $(Build.ArtifactStagingDirectory)/projectAssetsJson
  displayName: Collecting project.assets.json artifacts
  condition: succeededOrFailed()

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: $(Build.ArtifactStagingDirectory)/projectAssetsJson
    ArtifactName: projectAssetsJson
    ArtifactType: Container
  displayName: Publish projectAssetsJson artifacts
  condition: succeededOrFailed()

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: $(Build.ArtifactStagingDirectory)/build_logs
    ArtifactName: build_logs
    ArtifactType: Container
  displayName: Publish build_logs artifacts
  condition: succeededOrFailed()

## The rest of these steps are for deployment and skipped for PR builds

#- task: PublishBuildArtifacts@1
#  inputs:
#    PathtoPublish: $(build.sourcesdirectory)/bin
#    ArtifactName: bin
#    ArtifactType: Container
#  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
