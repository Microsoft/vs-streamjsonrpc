steps:
- script: dotnet --info
  displayName: Show dotnet SDK info

- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    verbosityRestore: normal # detailed, normal, minimal
    projects: src/**/*.sln
    feedsToUse: config
    nugetConfigPath: src/nuget.config

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: build
    projects: src/**/*.sln
    arguments: --no-restore -c $(BuildConfiguration) -bl:"$(Build.ArtifactStagingDirectory)/build_logs/msbuild.binlog"

- task: DotNetCoreCLI@2
  displayName: Pack
  inputs:
    command: pack
    projects: src/**/*.sln
    arguments: --no-build -c $(BuildConfiguration)

- task: DotNetCoreCLI@2
  displayName: Run tests
  inputs:
    command: test
    projects: src/**/*.Tests.csproj
    arguments: --configuration $(BuildConfiguration) --no-build --filter "TestCategory!=FailsInCloudTest" -v n
  condition: and(succeeded(), ne(variables['SignType'], 'real'))

- task: CopyFiles@1
  inputs:
    Contents: |
      obj/**/project.assets.json
    TargetFolder: $(Build.ArtifactStagingDirectory)/projectAssetsJson
  displayName: Collecting project.assets.json artifacts
  condition: succeededOrFailed()

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: $(Build.ArtifactStagingDirectory)/projectAssetsJson
    ArtifactName: projectAssetsJson
    ArtifactType: Container
  displayName: Publish projectAssetsJson artifacts
  condition: succeededOrFailed()

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: $(Build.ArtifactStagingDirectory)/build_logs
    ArtifactName: build_logs
    ArtifactType: Container
  displayName: Publish build_logs artifacts
  condition: succeededOrFailed()

## The rest of these steps are for deployment and skipped for PR builds

#- task: PublishBuildArtifacts@1
#  inputs:
#    PathtoPublish: $(build.sourcesdirectory)/bin
#    ArtifactName: bin
#    ArtifactType: Container
#  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
